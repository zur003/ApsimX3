namespace UserInterface.Views
{
    using global::UserInterface.Interfaces;
    using Gtk;
    using System;
    using System.IO;
    using System.Reflection;
    using Utility;

    public class ViewBase
    {
        /// <summary>A builder instance for extracting controls from resource.</summary>
        private readonly Builder builder;

        private string gladeString;

        /// <summary>
        /// A reference to the main view.
        /// </summary>
        public static IMainView MasterView = null;

        /// <summary>
        /// The parent view.
        /// </summary>
        protected ViewBase owner = null;

        /// <summary>
        /// The main widget in this view.
        /// </summary>
        protected Widget mainWidget = null;

        /// <summary>
        /// Displays an error message to the user.
        /// </summary>
        /// <param name="err"></param>
        protected void ShowError(Exception err)
        {
            MasterView.ShowError(err);
        }

        /// <summary>
        /// Asks the user for a file or directory. If you need more specialised behaviour 
        /// (e.g. select multiple files), you will need to instantiate and use an 
        /// implementation of <see cref="IFileDialog"/>.
        /// </summary>
        /// <param name="prompt">Prompt to be displayed in the title bar of the dialog.</param>
        /// <param name="actionType">Type of action the dialog should perform.</param>
        /// /// <param name="fileType">File types the user is allowed to choose.</param>
        /// <param name="initialDirectory">Initial directory. Defaults to the previously used directory.</param>
        /// <returns>Path to the chosen file or directory.</returns>
        public static string AskUserForFileName(string prompt, FileDialog.FileActionType actionType, string fileType, string initialDirectory = "")
        {
            IFileDialog dialog = new FileDialog()
            {
                Prompt = prompt,
                Action = actionType,
                FileType = fileType,
                InitialDirectory = initialDirectory
            };
            return dialog.GetFile();
        }

        /// <summary>
        /// Returns a new Builder object generated by parsing the glade 
        /// text found in the indicated resource.
        /// </summary>
        /// <param name="resourceName">Name of the resouce.</param>
        /// <returns>A new Builder object, or null on failure.</returns>
        public static Builder BuilderFromResource(string resourceName)
        {
            Stream resStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
            if (resStream == null)
                return null;
            using (StreamReader reader = new StreamReader(resStream))
            {
                var gladeString = reader.ReadToEnd();

                Builder result = new Builder();
                result.AddFromString(gladeString);
                return result;
            }
        }

        /// <summary>
        /// Returns a new Builder object generated by parsing the glade 
        /// text found in the indicated resource.
        /// </summary>
        /// <param name="resourceName">Name of the resouce.</param>
        /// <returns>A new Builder object, or null on failure.</returns>
        public Builder GetBuilderFromResource(string resourceName)
        {
            Stream resStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
            if (resStream == null)
                return null;
            using (StreamReader reader = new StreamReader(resStream))
            {
                gladeString = reader.ReadToEnd();

                Builder result = new Builder();
                result.AddFromString(gladeString);
                return result;
            }
        }

        private void SetMainWidget()
        {
            // Find the top level control id.
            int posFirstID = gladeString.IndexOf("id=\"");
            if (posFirstID != -1)
            {
                posFirstID += "id=\"".Length;
                var posCloseQuote = gladeString.IndexOf("\"", posFirstID);
                var controlID = gladeString.Substring(posFirstID, posCloseQuote - posFirstID);
                mainWidget = (Gtk.Widget)builder.GetObject(controlID);
            }
        }

        /// <summary>
        /// The parent view.
        /// </summary>
        public ViewBase Owner
        {
            get
            {
                return owner;
            }
        }

        /// <summary>
        /// The main widget in this view.
        /// </summary>
        public Widget MainWidget
        {
            get
            {
                return mainWidget;
            }
        }

        /// <summary>.</summary>
        public ViewBase()
        {
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="owner">The parent view.</param>
        public ViewBase(ViewBase owner)
        {
            this.owner = owner;
        }

        public ViewBase(ViewBase owner, string gladeResourceName)
        {
            this.owner = owner;
            builder = GetBuilderFromResource(gladeResourceName);
            SetMainWidget();
        }

        /// <summary>
        /// Get a control on the view.
        /// </summary>
        /// <typeparam name="T">The type of the control.</typeparam>
        /// <param name="controlName">The name of the control.</param>
        /// <returns>The control or null if not found.</returns>
        public T GetControl<T>(string controlName) where T : ViewBase, new()
        {
            T control = new T();
            control.Initialise(this, builder.GetObject(controlName));
            return control;
        }

        /// <summary>
        /// A method used when a view is wrapping a gtk control.
        /// </summary>
        /// <param name="ownerView">The owning view.</param>
        /// <param name="gtkControl">The gtk control being wrapped.</param>
        protected virtual void Initialise(ViewBase ownerView, GLib.Object gtkControl)
        {
            owner = ownerView;
        }
    }
}